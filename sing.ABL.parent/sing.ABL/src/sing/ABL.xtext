grammar sing.ABL with org.eclipse.xtext.xbase.Xbase

generate aBL "http://www.ABL.sing"

Model:
	('package' name=QualifiedName ';')?
	((imports+=ImportDeclaration) | (constants+=ConstantDeclaration))*
	'behaving_entity' behavingEntityName=ID '{'
	(teamNeededForSuccessDefault=TeamNeededForSuccessDefaultDeclaration)?
	(decisionCycleSMCall=DecisionCycleSMCallDelcaration)?
	(conflicts+=ConflictDeclaration)+
	(ablDeclarations+=AblDeclaration)*
	
	//( BehaviorDefinition | Rule )* ( InitialTree ) <RBRACE> 
	'}'
	//EOF
;

ImportDeclaration:
	'import' name=QualifiedName ';'
;


/*what exactly is going on here with ABL? 'constants' is a bit non-standard. */
ConstantDeclaration:
	'constants' name=QualifiedName ';'
;

TeamNeededForSuccessDefaultDeclaration:
	'joint_goal_success_negotiation'
	('team_needed_for_success' | 'one_needed_for_success')
	';'
;

DecisionCycleSMCallDelcaration:
	'decision_cycle_sm_call' name=QualifiedName ';'
;

ConflictDeclaration:
	'conflict' (conflictNames+=ID)+ ';'
;

AblDeclaration:
	(ablVariable=AblVariableDelcaration ';')
	| WMERegistration
	| ActionRegistration
	| WMEDeclaration
	| PropertyDeclaration
	
;

AblVariableDelcaration:
	Type variables+=VariableDeclarator (',' variables+=VariableDeclarator)*
;


VariableDeclarator:
	id=ID ('[]')* ('=' init=VariableInitializer)?
;

VariableInitializer:
	( ArrayInitializer | Expression )
;


Expression:
	
;

ArrayInitializer:
	"{" (VariableInitializer (',' VariableInitializer)*)? (',')	
;

Type:
	(type=PrimitiveType | type=QualifiedName) ('[]')*
;

PrimitiveType:
	( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' )
;