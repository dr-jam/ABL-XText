/*
 * generated by Xtext 2.28.0
 */
package sing.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class ABLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sing.ABL.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cImportsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cImportsImportDeclarationParserRuleCall_1_0_0 = (RuleCall)cImportsAssignment_1_0.eContents().get(0);
		private final Assignment cConstantsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cConstantsConstantDeclarationParserRuleCall_1_1_0 = (RuleCall)cConstantsAssignment_1_1.eContents().get(0);
		private final Keyword cBehaving_entityKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBehavingEntityNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBehavingEntityNameIDTerminalRuleCall_3_0 = (RuleCall)cBehavingEntityNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTeamNeededForSuccessDefaultAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTeamNeededForSuccessDefaultTeamNeededForSuccessDefaultDeclarationParserRuleCall_5_0 = (RuleCall)cTeamNeededForSuccessDefaultAssignment_5.eContents().get(0);
		private final Assignment cDecisionCycleSMCallAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDecisionCycleSMCallDecisionCycleSMCallDelcarationParserRuleCall_6_0 = (RuleCall)cDecisionCycleSMCallAssignment_6.eContents().get(0);
		private final Assignment cConflicitsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cConflicitsConflictDeclarationParserRuleCall_7_0 = (RuleCall)cConflicitsAssignment_7.eContents().get(0);
		private final Assignment cAblDeclarationsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cAblDeclarationsAblDeclarationParserRuleCall_8_0 = (RuleCall)cAblDeclarationsAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Model:
		//    ('package' name=QualifiedName ';')?
		//    ((imports+=ImportDeclaration) | (constants+=ConstantDeclaration))*
		//    'behaving_entity' behavingEntityName=ID '{'
		//    (teamNeededForSuccessDefault=TeamNeededForSuccessDefaultDeclaration)?
		//    (decisionCycleSMCall=DecisionCycleSMCallDelcaration)?
		//    (conflicits+=ConflictDeclaration)+
		//    (ablDeclarations+=AblDeclaration)*
		//    //( BehaviorDefinition | Rule )* ( InitialTree ) <RBRACE>
		//    '}'
		//    //EOF
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('package' name=QualifiedName ';')?
		//((imports+=ImportDeclaration) | (constants+=ConstantDeclaration))*
		//'behaving_entity' behavingEntityName=ID '{'
		//(teamNeededForSuccessDefault=TeamNeededForSuccessDefaultDeclaration)?
		//(decisionCycleSMCall=DecisionCycleSMCallDelcaration)?
		//(conflicits+=ConflictDeclaration)+
		//(ablDeclarations+=AblDeclaration)*
		////( BehaviorDefinition | Rule )* ( InitialTree ) <RBRACE>
		//'}'
		public Group getGroup() { return cGroup; }
		
		//('package' name=QualifiedName ';')?
		public Group getGroup_0() { return cGroup_0; }
		
		//'package'
		public Keyword getPackageKeyword_0_0() { return cPackageKeyword_0_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_1_0() { return cNameQualifiedNameParserRuleCall_0_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }
		
		//((imports+=ImportDeclaration) | (constants+=ConstantDeclaration))*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(imports+=ImportDeclaration)
		public Assignment getImportsAssignment_1_0() { return cImportsAssignment_1_0; }
		
		//ImportDeclaration
		public RuleCall getImportsImportDeclarationParserRuleCall_1_0_0() { return cImportsImportDeclarationParserRuleCall_1_0_0; }
		
		//(constants+=ConstantDeclaration)
		public Assignment getConstantsAssignment_1_1() { return cConstantsAssignment_1_1; }
		
		//ConstantDeclaration
		public RuleCall getConstantsConstantDeclarationParserRuleCall_1_1_0() { return cConstantsConstantDeclarationParserRuleCall_1_1_0; }
		
		//'behaving_entity'
		public Keyword getBehaving_entityKeyword_2() { return cBehaving_entityKeyword_2; }
		
		//behavingEntityName=ID
		public Assignment getBehavingEntityNameAssignment_3() { return cBehavingEntityNameAssignment_3; }
		
		//ID
		public RuleCall getBehavingEntityNameIDTerminalRuleCall_3_0() { return cBehavingEntityNameIDTerminalRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(teamNeededForSuccessDefault=TeamNeededForSuccessDefaultDeclaration)?
		public Assignment getTeamNeededForSuccessDefaultAssignment_5() { return cTeamNeededForSuccessDefaultAssignment_5; }
		
		//TeamNeededForSuccessDefaultDeclaration
		public RuleCall getTeamNeededForSuccessDefaultTeamNeededForSuccessDefaultDeclarationParserRuleCall_5_0() { return cTeamNeededForSuccessDefaultTeamNeededForSuccessDefaultDeclarationParserRuleCall_5_0; }
		
		//(decisionCycleSMCall=DecisionCycleSMCallDelcaration)?
		public Assignment getDecisionCycleSMCallAssignment_6() { return cDecisionCycleSMCallAssignment_6; }
		
		//DecisionCycleSMCallDelcaration
		public RuleCall getDecisionCycleSMCallDecisionCycleSMCallDelcarationParserRuleCall_6_0() { return cDecisionCycleSMCallDecisionCycleSMCallDelcarationParserRuleCall_6_0; }
		
		//(conflicits+=ConflictDeclaration)+
		public Assignment getConflicitsAssignment_7() { return cConflicitsAssignment_7; }
		
		//ConflictDeclaration
		public RuleCall getConflicitsConflictDeclarationParserRuleCall_7_0() { return cConflicitsConflictDeclarationParserRuleCall_7_0; }
		
		//(ablDeclarations+=AblDeclaration)*
		public Assignment getAblDeclarationsAssignment_8() { return cAblDeclarationsAssignment_8; }
		
		//AblDeclaration
		public RuleCall getAblDeclarationsAblDeclarationParserRuleCall_8_0() { return cAblDeclarationsAblDeclarationParserRuleCall_8_0; }
		
		////( BehaviorDefinition | Rule )* ( InitialTree ) <RBRACE>
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ImportDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sing.ABL.ImportDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ImportDeclaration:
		//    'import' name=QualifiedName ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' name=QualifiedName ';'
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ConstantDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sing.ABL.ConstantDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstantsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		///*what exactly is going on here with ABL? 'constants' is a bit non-standard. */
		//ConstantDeclaration:
		//    'constants' name=QualifiedName ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'constants' name=QualifiedName ';'
		public Group getGroup() { return cGroup; }
		
		//'constants'
		public Keyword getConstantsKeyword_0() { return cConstantsKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class TeamNeededForSuccessDefaultDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sing.ABL.TeamNeededForSuccessDefaultDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJoint_goal_success_negotiationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cTeam_needed_for_successKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cOne_needed_for_successKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TeamNeededForSuccessDefaultDeclaration:
		//    'joint_goal_success_negotiation'
		//    ('team_needed_for_success' | 'one_needed_for_success')
		//    ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'joint_goal_success_negotiation'
		//('team_needed_for_success' | 'one_needed_for_success')
		//';'
		public Group getGroup() { return cGroup; }
		
		//'joint_goal_success_negotiation'
		public Keyword getJoint_goal_success_negotiationKeyword_0() { return cJoint_goal_success_negotiationKeyword_0; }
		
		//('team_needed_for_success' | 'one_needed_for_success')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'team_needed_for_success'
		public Keyword getTeam_needed_for_successKeyword_1_0() { return cTeam_needed_for_successKeyword_1_0; }
		
		//'one_needed_for_success'
		public Keyword getOne_needed_for_successKeyword_1_1() { return cOne_needed_for_successKeyword_1_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class DecisionCycleSMCallDelcarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sing.ABL.DecisionCycleSMCallDelcaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDecision_cycle_sm_callKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DecisionCycleSMCallDelcaration:
		//    'decision_cycle_sm_call' name=QualifiedName ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'decision_cycle_sm_call' name=QualifiedName ';'
		public Group getGroup() { return cGroup; }
		
		//'decision_cycle_sm_call'
		public Keyword getDecision_cycle_sm_callKeyword_0() { return cDecision_cycle_sm_callKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ConflictDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sing.ABL.ConflictDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConflictKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConflictNamesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConflictNamesIDTerminalRuleCall_1_0 = (RuleCall)cConflictNamesAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ConflictDeclaration:
		//    'conflict' (conflictNames+=ID)+ ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'conflict' (conflictNames+=ID)+ ';'
		public Group getGroup() { return cGroup; }
		
		//'conflict'
		public Keyword getConflictKeyword_0() { return cConflictKeyword_0; }
		
		//(conflictNames+=ID)+
		public Assignment getConflictNamesAssignment_1() { return cConflictNamesAssignment_1; }
		
		//ID
		public RuleCall getConflictNamesIDTerminalRuleCall_1_0() { return cConflictNamesIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class AblDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sing.ABL.AblDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cAblVariableAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cAblVariableXVariableDeclarationParserRuleCall_0_0_0 = (RuleCall)cAblVariableAssignment_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cWMERegistrationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cActionRegistrationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWMEDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPropertyDeclarationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//AblDeclaration:
		//    (ablVariable=XVariableDeclaration ';')
		//    | WMERegistration
		//    | ActionRegistration
		//    | WMEDeclaration
		//    | PropertyDeclaration
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(ablVariable=XVariableDeclaration ';')
		//| WMERegistration
		//| ActionRegistration
		//| WMEDeclaration
		//| PropertyDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(ablVariable=XVariableDeclaration ';')
		public Group getGroup_0() { return cGroup_0; }
		
		//ablVariable=XVariableDeclaration
		public Assignment getAblVariableAssignment_0_0() { return cAblVariableAssignment_0_0; }
		
		//XVariableDeclaration
		public RuleCall getAblVariableXVariableDeclarationParserRuleCall_0_0_0() { return cAblVariableXVariableDeclarationParserRuleCall_0_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//WMERegistration
		public RuleCall getWMERegistrationParserRuleCall_1() { return cWMERegistrationParserRuleCall_1; }
		
		//ActionRegistration
		public RuleCall getActionRegistrationParserRuleCall_2() { return cActionRegistrationParserRuleCall_2; }
		
		//WMEDeclaration
		public RuleCall getWMEDeclarationParserRuleCall_3() { return cWMEDeclarationParserRuleCall_3; }
		
		//PropertyDeclaration
		public RuleCall getPropertyDeclarationParserRuleCall_4() { return cPropertyDeclarationParserRuleCall_4; }
	}
	public class WMERegistrationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sing.ABL.WMERegistration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRegisterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cWmeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWmeClassAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWmeClassIDTerminalRuleCall_2_0 = (RuleCall)cWmeClassAssignment_2.eContents().get(0);
		private final Keyword cWithKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameQualifiedNameParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//WMERegistration:
		//    'register' 'wme' wmeClass=ID 'with' name=QualifiedName ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'register' 'wme' wmeClass=ID 'with' name=QualifiedName ';'
		public Group getGroup() { return cGroup; }
		
		//'register'
		public Keyword getRegisterKeyword_0() { return cRegisterKeyword_0; }
		
		//'wme'
		public Keyword getWmeKeyword_1() { return cWmeKeyword_1; }
		
		//wmeClass=ID
		public Assignment getWmeClassAssignment_2() { return cWmeClassAssignment_2; }
		
		//ID
		public RuleCall getWmeClassIDTerminalRuleCall_2_0() { return cWmeClassIDTerminalRuleCall_2_0; }
		
		//'with'
		public Keyword getWithKeyword_3() { return cWithKeyword_3; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_4_0() { return cNameQualifiedNameParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ActionRegistrationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sing.ABL.ActionRegistration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRegisterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cActKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Assignment cAblNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cAblNameIDTerminalRuleCall_1_1_0 = (RuleCall)cAblNameAssignment_1_1.eContents().get(0);
		private final Assignment cAblName2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAblName2IDTerminalRuleCall_2_0 = (RuleCall)cAblName2Assignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cTypesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cTypesABLSimpleTypeParserRuleCall_4_0_0 = (RuleCall)cTypesAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cTypesAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cTypesABLSimpleTypeParserRuleCall_4_1_1_0 = (RuleCall)cTypesAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cWithKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cActNameAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cActNameIDTerminalRuleCall_7_0 = (RuleCall)cActNameAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ActionRegistration:
		//    'register' ('act' | ablName=ID) ablName2=ID
		//    '(' (types+=ABLSimpleType (',' types+=ABLSimpleType)*)? ')' 'with' actName=ID ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'register' ('act' | ablName=ID) ablName2=ID
		//'(' (types+=ABLSimpleType (',' types+=ABLSimpleType)*)? ')' 'with' actName=ID ';'
		public Group getGroup() { return cGroup; }
		
		//'register'
		public Keyword getRegisterKeyword_0() { return cRegisterKeyword_0; }
		
		//('act' | ablName=ID)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'act'
		public Keyword getActKeyword_1_0() { return cActKeyword_1_0; }
		
		//ablName=ID
		public Assignment getAblNameAssignment_1_1() { return cAblNameAssignment_1_1; }
		
		//ID
		public RuleCall getAblNameIDTerminalRuleCall_1_1_0() { return cAblNameIDTerminalRuleCall_1_1_0; }
		
		//ablName2=ID
		public Assignment getAblName2Assignment_2() { return cAblName2Assignment_2; }
		
		//ID
		public RuleCall getAblName2IDTerminalRuleCall_2_0() { return cAblName2IDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(types+=ABLSimpleType (',' types+=ABLSimpleType)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//types+=ABLSimpleType
		public Assignment getTypesAssignment_4_0() { return cTypesAssignment_4_0; }
		
		//ABLSimpleType
		public RuleCall getTypesABLSimpleTypeParserRuleCall_4_0_0() { return cTypesABLSimpleTypeParserRuleCall_4_0_0; }
		
		//(',' types+=ABLSimpleType)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//types+=ABLSimpleType
		public Assignment getTypesAssignment_4_1_1() { return cTypesAssignment_4_1_1; }
		
		//ABLSimpleType
		public RuleCall getTypesABLSimpleTypeParserRuleCall_4_1_1_0() { return cTypesABLSimpleTypeParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'with'
		public Keyword getWithKeyword_6() { return cWithKeyword_6; }
		
		//actName=ID
		public Assignment getActNameAssignment_7() { return cActNameAssignment_7; }
		
		//ID
		public RuleCall getActNameIDTerminalRuleCall_7_0() { return cActNameIDTerminalRuleCall_7_0; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class WMEDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sing.ABL.WMEDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWmeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameIDTerminalRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExtendNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExtendNameIDTerminalRuleCall_2_1_0 = (RuleCall)cExtendNameAssignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cAblVariableDeclarationAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cAblVariableDeclarationXVariableDeclarationParserRuleCall_4_0_0 = (RuleCall)cAblVariableDeclarationAssignment_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///*<WME> AblName ( <EXTENDS> AblName )? <LBRACE> (
		//AblVariableDeclaration <SEMICOLON> )* <RBRACE> */
		//WMEDeclaration:
		//    'wme' varName=ID ('extends' extendName=ID)?
		//    '{' (ablVariableDeclaration+=XVariableDeclaration ';')* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'wme' varName=ID ('extends' extendName=ID)?
		//'{' (ablVariableDeclaration+=XVariableDeclaration ';')* '}'
		public Group getGroup() { return cGroup; }
		
		//'wme'
		public Keyword getWmeKeyword_0() { return cWmeKeyword_0; }
		
		//varName=ID
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }
		
		//ID
		public RuleCall getVarNameIDTerminalRuleCall_1_0() { return cVarNameIDTerminalRuleCall_1_0; }
		
		//('extends' extendName=ID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//extendName=ID
		public Assignment getExtendNameAssignment_2_1() { return cExtendNameAssignment_2_1; }
		
		//ID
		public RuleCall getExtendNameIDTerminalRuleCall_2_1_0() { return cExtendNameIDTerminalRuleCall_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(ablVariableDeclaration+=XVariableDeclaration ';')*
		public Group getGroup_4() { return cGroup_4; }
		
		//ablVariableDeclaration+=XVariableDeclaration
		public Assignment getAblVariableDeclarationAssignment_4_0() { return cAblVariableDeclarationAssignment_4_0; }
		
		//XVariableDeclaration
		public RuleCall getAblVariableDeclarationXVariableDeclarationParserRuleCall_4_0_0() { return cAblVariableDeclarationXVariableDeclarationParserRuleCall_4_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class PropertyDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sing.ABL.PropertyDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeXTypeLiteralParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cAblNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAblNameIDTerminalRuleCall_2_0 = (RuleCall)cAblNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PropertyDeclaration:
		//    'property' type=XTypeLiteral ablName=ID ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'property' type=XTypeLiteral ablName=ID ';'
		public Group getGroup() { return cGroup; }
		
		//'property'
		public Keyword getPropertyKeyword_0() { return cPropertyKeyword_0; }
		
		//type=XTypeLiteral
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//XTypeLiteral
		public RuleCall getTypeXTypeLiteralParserRuleCall_1_0() { return cTypeXTypeLiteralParserRuleCall_1_0; }
		
		//ablName=ID
		public Assignment getAblNameAssignment_2() { return cAblNameAssignment_2; }
		
		//ID
		public RuleCall getAblNameIDTerminalRuleCall_2_0() { return cAblNameIDTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ABLSimpleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sing.ABL.ABLSimpleType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///*
		//BehaviorDefinition ::= ( BehaviorTypeModifier )* BehaviorType <BEHAVIOR> AblName
		//<LPAREN> ( AblSimpleType AblSimpleType ( <COMMA> AblSimpleType
		//AblSimpleType )* )? <RPAREN> <LBRACE> ( BehaviorModifiers )* (
		//AblVariableDeclaration <SEMICOLON> )* ( BehaviorStep )* <RBRACE>
		//*/
		///* Replaced with XVariableDeclaration */
		////AblVariableDelcaration:
		////    Type variables+=VariableDeclarator (',' variables+=VariableDeclarator)*
		////;
		///* Replaced with XVariableDeclaration */
		////VariableDeclarator:
		////    id=ID ('[]')* ('=' init=VariableInitializer)?
		////;
		///* Replaced with XVariableDeclaration */
		////VariableInitializer:
		////    ( ArrayInitializer | Expression )
		////;
		///* Replaced with XVariableDeclaration */
		////Expression:
		////
		////;
		///* Replaced with XVariableDeclaration */
		////ArrayInitializer:
		////    "{" (VariableInitializer (',' VariableInitializer)*)? (',')
		////;
		//ABLSimpleType:
		//    PrimitiveType | ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimitiveType | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimitiveType
		public RuleCall getPrimitiveTypeParserRuleCall_0() { return cPrimitiveTypeParserRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sing.ABL.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cTypePrimitiveTypeParserRuleCall_0_0_0 = (RuleCall)cTypeAssignment_0_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cTypeQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cTypeAssignment_0_1.eContents().get(0);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Type:
		//    (type=PrimitiveType | type=QualifiedName) ('[]')*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(type=PrimitiveType | type=QualifiedName) ('[]')*
		public Group getGroup() { return cGroup; }
		
		//(type=PrimitiveType | type=QualifiedName)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//type=PrimitiveType
		public Assignment getTypeAssignment_0_0() { return cTypeAssignment_0_0; }
		
		//PrimitiveType
		public RuleCall getTypePrimitiveTypeParserRuleCall_0_0_0() { return cTypePrimitiveTypeParserRuleCall_0_0_0; }
		
		//type=QualifiedName
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }
		
		//QualifiedName
		public RuleCall getTypeQualifiedNameParserRuleCall_0_1_0() { return cTypeQualifiedNameParserRuleCall_0_1_0; }
		
		//('[]')*
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_1() { return cLeftSquareBracketRightSquareBracketKeyword_1; }
	}
	public class PrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sing.ABL.PrimitiveType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBooleanKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCharKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cByteKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cShortKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cIntKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLongKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cFloatKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cDoubleKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//PrimitiveType:
		//    ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' )
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'boolean'
		public Keyword getBooleanKeyword_0() { return cBooleanKeyword_0; }
		
		//'char'
		public Keyword getCharKeyword_1() { return cCharKeyword_1; }
		
		//'byte'
		public Keyword getByteKeyword_2() { return cByteKeyword_2; }
		
		//'short'
		public Keyword getShortKeyword_3() { return cShortKeyword_3; }
		
		//'int'
		public Keyword getIntKeyword_4() { return cIntKeyword_4; }
		
		//'long'
		public Keyword getLongKeyword_5() { return cLongKeyword_5; }
		
		//'float'
		public Keyword getFloatKeyword_6() { return cFloatKeyword_6; }
		
		//'double'
		public Keyword getDoubleKeyword_7() { return cDoubleKeyword_7; }
	}
	
	
	private final ModelElements pModel;
	private final ImportDeclarationElements pImportDeclaration;
	private final ConstantDeclarationElements pConstantDeclaration;
	private final TeamNeededForSuccessDefaultDeclarationElements pTeamNeededForSuccessDefaultDeclaration;
	private final DecisionCycleSMCallDelcarationElements pDecisionCycleSMCallDelcaration;
	private final ConflictDeclarationElements pConflictDeclaration;
	private final AblDeclarationElements pAblDeclaration;
	private final WMERegistrationElements pWMERegistration;
	private final ActionRegistrationElements pActionRegistration;
	private final WMEDeclarationElements pWMEDeclaration;
	private final PropertyDeclarationElements pPropertyDeclaration;
	private final ABLSimpleTypeElements pABLSimpleType;
	private final TypeElements pType;
	private final PrimitiveTypeElements pPrimitiveType;
	
	private final Grammar grammar;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public ABLGrammarAccess(GrammarProvider grammarProvider,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pModel = new ModelElements();
		this.pImportDeclaration = new ImportDeclarationElements();
		this.pConstantDeclaration = new ConstantDeclarationElements();
		this.pTeamNeededForSuccessDefaultDeclaration = new TeamNeededForSuccessDefaultDeclarationElements();
		this.pDecisionCycleSMCallDelcaration = new DecisionCycleSMCallDelcarationElements();
		this.pConflictDeclaration = new ConflictDeclarationElements();
		this.pAblDeclaration = new AblDeclarationElements();
		this.pWMERegistration = new WMERegistrationElements();
		this.pActionRegistration = new ActionRegistrationElements();
		this.pWMEDeclaration = new WMEDeclarationElements();
		this.pPropertyDeclaration = new PropertyDeclarationElements();
		this.pABLSimpleType = new ABLSimpleTypeElements();
		this.pType = new TypeElements();
		this.pPrimitiveType = new PrimitiveTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("sing.ABL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//Model:
	//    ('package' name=QualifiedName ';')?
	//    ((imports+=ImportDeclaration) | (constants+=ConstantDeclaration))*
	//    'behaving_entity' behavingEntityName=ID '{'
	//    (teamNeededForSuccessDefault=TeamNeededForSuccessDefaultDeclaration)?
	//    (decisionCycleSMCall=DecisionCycleSMCallDelcaration)?
	//    (conflicits+=ConflictDeclaration)+
	//    (ablDeclarations+=AblDeclaration)*
	//    //( BehaviorDefinition | Rule )* ( InitialTree ) <RBRACE>
	//    '}'
	//    //EOF
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//ImportDeclaration:
	//    'import' name=QualifiedName ';'
	//;
	public ImportDeclarationElements getImportDeclarationAccess() {
		return pImportDeclaration;
	}
	
	public ParserRule getImportDeclarationRule() {
		return getImportDeclarationAccess().getRule();
	}
	
	///*what exactly is going on here with ABL? 'constants' is a bit non-standard. */
	//ConstantDeclaration:
	//    'constants' name=QualifiedName ';'
	//;
	public ConstantDeclarationElements getConstantDeclarationAccess() {
		return pConstantDeclaration;
	}
	
	public ParserRule getConstantDeclarationRule() {
		return getConstantDeclarationAccess().getRule();
	}
	
	//TeamNeededForSuccessDefaultDeclaration:
	//    'joint_goal_success_negotiation'
	//    ('team_needed_for_success' | 'one_needed_for_success')
	//    ';'
	//;
	public TeamNeededForSuccessDefaultDeclarationElements getTeamNeededForSuccessDefaultDeclarationAccess() {
		return pTeamNeededForSuccessDefaultDeclaration;
	}
	
	public ParserRule getTeamNeededForSuccessDefaultDeclarationRule() {
		return getTeamNeededForSuccessDefaultDeclarationAccess().getRule();
	}
	
	//DecisionCycleSMCallDelcaration:
	//    'decision_cycle_sm_call' name=QualifiedName ';'
	//;
	public DecisionCycleSMCallDelcarationElements getDecisionCycleSMCallDelcarationAccess() {
		return pDecisionCycleSMCallDelcaration;
	}
	
	public ParserRule getDecisionCycleSMCallDelcarationRule() {
		return getDecisionCycleSMCallDelcarationAccess().getRule();
	}
	
	//ConflictDeclaration:
	//    'conflict' (conflictNames+=ID)+ ';'
	//;
	public ConflictDeclarationElements getConflictDeclarationAccess() {
		return pConflictDeclaration;
	}
	
	public ParserRule getConflictDeclarationRule() {
		return getConflictDeclarationAccess().getRule();
	}
	
	//AblDeclaration:
	//    (ablVariable=XVariableDeclaration ';')
	//    | WMERegistration
	//    | ActionRegistration
	//    | WMEDeclaration
	//    | PropertyDeclaration
	//;
	public AblDeclarationElements getAblDeclarationAccess() {
		return pAblDeclaration;
	}
	
	public ParserRule getAblDeclarationRule() {
		return getAblDeclarationAccess().getRule();
	}
	
	//WMERegistration:
	//    'register' 'wme' wmeClass=ID 'with' name=QualifiedName ';'
	//;
	public WMERegistrationElements getWMERegistrationAccess() {
		return pWMERegistration;
	}
	
	public ParserRule getWMERegistrationRule() {
		return getWMERegistrationAccess().getRule();
	}
	
	//ActionRegistration:
	//    'register' ('act' | ablName=ID) ablName2=ID
	//    '(' (types+=ABLSimpleType (',' types+=ABLSimpleType)*)? ')' 'with' actName=ID ';'
	//;
	public ActionRegistrationElements getActionRegistrationAccess() {
		return pActionRegistration;
	}
	
	public ParserRule getActionRegistrationRule() {
		return getActionRegistrationAccess().getRule();
	}
	
	///*<WME> AblName ( <EXTENDS> AblName )? <LBRACE> (
	//AblVariableDeclaration <SEMICOLON> )* <RBRACE> */
	//WMEDeclaration:
	//    'wme' varName=ID ('extends' extendName=ID)?
	//    '{' (ablVariableDeclaration+=XVariableDeclaration ';')* '}'
	//;
	public WMEDeclarationElements getWMEDeclarationAccess() {
		return pWMEDeclaration;
	}
	
	public ParserRule getWMEDeclarationRule() {
		return getWMEDeclarationAccess().getRule();
	}
	
	//PropertyDeclaration:
	//    'property' type=XTypeLiteral ablName=ID ';'
	//;
	public PropertyDeclarationElements getPropertyDeclarationAccess() {
		return pPropertyDeclaration;
	}
	
	public ParserRule getPropertyDeclarationRule() {
		return getPropertyDeclarationAccess().getRule();
	}
	
	///*
	//BehaviorDefinition ::= ( BehaviorTypeModifier )* BehaviorType <BEHAVIOR> AblName
	//<LPAREN> ( AblSimpleType AblSimpleType ( <COMMA> AblSimpleType
	//AblSimpleType )* )? <RPAREN> <LBRACE> ( BehaviorModifiers )* (
	//AblVariableDeclaration <SEMICOLON> )* ( BehaviorStep )* <RBRACE>
	//*/
	///* Replaced with XVariableDeclaration */
	////AblVariableDelcaration:
	////    Type variables+=VariableDeclarator (',' variables+=VariableDeclarator)*
	////;
	///* Replaced with XVariableDeclaration */
	////VariableDeclarator:
	////    id=ID ('[]')* ('=' init=VariableInitializer)?
	////;
	///* Replaced with XVariableDeclaration */
	////VariableInitializer:
	////    ( ArrayInitializer | Expression )
	////;
	///* Replaced with XVariableDeclaration */
	////Expression:
	////
	////;
	///* Replaced with XVariableDeclaration */
	////ArrayInitializer:
	////    "{" (VariableInitializer (',' VariableInitializer)*)? (',')
	////;
	//ABLSimpleType:
	//    PrimitiveType | ID
	//;
	public ABLSimpleTypeElements getABLSimpleTypeAccess() {
		return pABLSimpleType;
	}
	
	public ParserRule getABLSimpleTypeRule() {
		return getABLSimpleTypeAccess().getRule();
	}
	
	//Type:
	//    (type=PrimitiveType | type=QualifiedName) ('[]')*
	//;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//PrimitiveType:
	//    ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' )
	//;
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return pPrimitiveType;
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}
	
	//XExpression returns XExpression :
	//    XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment returns XExpression :
	//    {XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |
	//    XOrExpression (
	//        =>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment
	//    )?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//    '='
	//;
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//    '+=' | '-=' | '*=' | '/=' | '%=' |
	//    '<' '<' '=' |
	//    '>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression returns XExpression:
	//    XAndExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr]) rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//    '||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression returns XExpression:
	//    XEqualityExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd]) rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//    '&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression returns XExpression:
	//    XRelationalExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//    rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//    '==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression returns XExpression:
	//    XOtherOperatorExpression
	//    (=>({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	//     =>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare]) rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//    '>=' | '<' '=' | '>' | '<' ;
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression returns XExpression:
	//    XAdditiveExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//    rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//      '->'
	//    | '..<'
	//    | '>' '..'
	//    | '..'
	//    | '=>'
	//    | '>' (=>('>' '>') | '>')
	//    | '<' (=>('<' '<') | '<' | '=>')
	//    | '<>'
	//    | '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression returns XExpression:
	//    XMultiplicativeExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//    rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//    '+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression returns XExpression:
	//    XUnaryOperation (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti]) rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//    '*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation returns XExpression:
	//    {XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
	//    | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//    "!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression returns XExpression:
	//    XPostfixOperation (=>({XCastedExpression.target=current} 'as') type=JvmTypeReference)*
	//;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation returns XExpression:
	//    XMemberFeatureCall =>({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?
	//;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//    "++" | "--"
	//;
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall returns XExpression:
	//    XPrimaryExpression
	//    (=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//    |=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::"))
	//        ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//        feature=[types::JvmIdentifiableElement|IdOrSuper] (
	//            =>explicitOperationCall?='('
	//                (
	//                    memberCallArguments+=XShortClosure
	//                  | memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	//                )?
	//            ')')?
	//            memberCallArguments+=XClosure?
	//        )*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression returns XExpression:
	//    XConstructorCall |
	//    XBlockExpression |
	//    XSwitchExpression |
	//    XSynchronizedExpression |
	//    XFeatureCall |
	//    XLiteral |
	//    XIfExpression |
	//    XForLoopExpression |
	//    XBasicForLoopExpression |
	//    XWhileExpression |
	//    XDoWhileExpression |
	//    XThrowExpression |
	//    XReturnExpression |
	//    XTryCatchFinallyExpression |
	//    XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral returns XExpression:
	//    XCollectionLiteral |
	//    XClosure |
	//    XBooleanLiteral |
	//    XNumberLiteral |
	//    XNullLiteral |
	//    XStringLiteral |
	//    XTypeLiteral
	//;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//    XSetLiteral | XListLiteral
	//;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//    {XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression )*)? '}'
	//;
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//    {XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression )*)? ']'
	//;
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure returns XExpression:
	//    =>({XClosure}
	//    '[')
	//        =>((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')?
	//        expression=XExpressionInClosure
	//    ']';
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure returns XExpression:
	//    {XBlockExpression}
	//    (expressions+=XExpressionOrVarDeclaration ';'?)*
	//;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure returns XExpression:
	//    =>({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|') expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression returns XExpression:
	//    '(' XExpression ')';
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression returns XExpression:
	//    {XIfExpression}
	//    'if' '(' if=XExpression ')'
	//    then=XExpression
	//    (=>'else' else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression returns XExpression:
	//    {XSwitchExpression}
	//    'switch' (=>('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')'
	//        | =>(declaredParam=JvmFormalParameter ':')? switch=XExpression) '{'
	//    (cases+=XCasePart)*
	//    ('default' ':' default=XExpression )?
	//    '}';
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//    {XCasePart}
	//    typeGuard=JvmTypeReference? ('case' case=XExpression)?
	//        (':' then=XExpression | fallThrough?=',') ;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression returns XExpression:
	//    =>({XForLoopExpression}
	//    'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//        eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression returns XExpression:
	//    {XBasicForLoopExpression}
	//    'for' '('(initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';'
	//        expression=XExpression? ';'
	//        (updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
	//        eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression returns XExpression:
	//    {XWhileExpression}
	//    'while' '(' predicate=XExpression ')'
	//        body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression returns XExpression:
	//    {XDoWhileExpression}
	//    'do'
	//        body=XExpression
	//    'while' '(' predicate=XExpression ')';
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression returns XExpression:
	//    {XBlockExpression}
	//    '{'
	//        (expressions+=XExpressionOrVarDeclaration ';'?)*
	//    '}';
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration returns XExpression:
	//    XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration returns XExpression:
	//    {XVariableDeclaration}
	//    (writeable?='var'|'val') (=>(type=JvmTypeReference name=ValidID) | name=ValidID) ('=' right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter returns types::JvmFormalParameter:
	//    (parameterType=JvmTypeReference)? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//    parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall returns XExpression:
	//    {XFeatureCall}
	//    ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//    feature=[types::JvmIdentifiableElement|IdOrSuper]
	//    (=>explicitOperationCall?='('
	//        (
	//            featureCallArguments+=XShortClosure
	//          | featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
	//        )?
	//    ')')?
	//    featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//    ValidID | 'extends' | 'static' | 'import' | 'extension'
	//;
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper :
	//    FeatureCallID | 'super'
	//;
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall returns XExpression:
	//    {XConstructorCall}
	//    'new' constructor=[types::JvmConstructor|QualifiedName]
	//    (=>'<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//    (=>explicitConstructorCall?='('
	//        (
	//            arguments+=XShortClosure
	//          | arguments+=XExpression (',' arguments+=XExpression)*
	//        )?
	//    ')')?
	//    arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral returns XExpression :
	//    {XBooleanLiteral} ('false' | isTrue?='true');
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral returns XExpression :
	//    {XNullLiteral} 'null';
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral returns XExpression :
	//    {XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral returns XExpression:
	//    {XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral returns XExpression :
	//    {XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] (arrayDimensions+=ArrayBrackets)* ')'
	//;
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression returns XExpression :
	//    {XThrowExpression} 'throw' expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression returns XExpression :
	//    {XReturnExpression} 'return' (->expression=XExpression)?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression returns XExpression:
	//    {XTryCatchFinallyExpression}
	//    'try'
	//        expression=XExpression
	//    (
	//        catchClauses+=XCatchClause+
	//        (=>'finally' finallyExpression=XExpression)?
	//    |    'finally' finallyExpression=XExpression
	//    );
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression returns XExpression:
	//    =>({XSynchronizedExpression}
	//    'synchronized' '(') param=XExpression ')' expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause :
	//    =>'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//@Override
	//QualifiedName:
	//    ValidID (=>'.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//    HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	///**
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes,
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// */
	//StaticQualifier:
	//    (ValidID '::')+
	//;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//    ('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F'|'_')+
	//    ('#' (('b'|'B')('i'|'I') | ('l'|'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//    '0'..'9' ('0'..'9'|'_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//    INT
	//    (('e'|'E') ('+'|'-')? INT)?
	//    (('b'|'B')('i'|'I'|'d'|'D') | ('l'|'L'|'d'|'D'|'f'|'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//    JvmParameterizedTypeReference =>({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	//    | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets :
	//    '[' ']'
	//;
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//    ('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//    type=[JvmType|QualifiedName] (
	//        =>'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>'
	//        (=>({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*
	//    )?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference returns JvmTypeReference:
	//    JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//    {JvmWildcardTypeReference} '?' (
	//      constraints+=JvmUpperBound (constraints+=JvmUpperBoundAnded)*
	//    | constraints+=JvmLowerBound (constraints+=JvmLowerBoundAnded)*
	//    )?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound :
	//    'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded returns JvmUpperBound:
	//    '&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound :
	//    'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded returns JvmLowerBound:
	//    '&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter :
	//    name=ValidID
	//    (constraints+=JvmUpperBound (constraints+=JvmUpperBoundAnded)*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard :
	//    QualifiedName  '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//    ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//    importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//    'import' (
	//        (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport] (wildcard?='*' | memberName=ValidID))
	//        | importedType=[JvmDeclaredType|QualifiedName]
	//        | importedNamespace=QualifiedNameWithWildcard) ';'?
	//;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//    (ValidID '.')+
	//;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//    '^'? ('a'..'z'|'A'..'Z'|'$'|'_') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') */ | !('\\'|'"') )* '"'? |
	//            "'" ( '\\' . /* ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') */ | !('\\'|"'") )* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT: '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT: '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS: (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
