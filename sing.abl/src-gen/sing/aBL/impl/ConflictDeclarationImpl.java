/**
 * generated by Xtext 2.28.0
 */
package sing.aBL.impl;

import java.util.Collection;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

import sing.aBL.ABLPackage;
import sing.aBL.ConflictDeclaration;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Conflict Declaration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link sing.aBL.impl.ConflictDeclarationImpl#getConflictNames <em>Conflict Names</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConflictDeclarationImpl extends MinimalEObjectImpl.Container implements ConflictDeclaration
{
  /**
   * The cached value of the '{@link #getConflictNames() <em>Conflict Names</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConflictNames()
   * @generated
   * @ordered
   */
  protected EList<String> conflictNames;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConflictDeclarationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ABLPackage.Literals.CONFLICT_DECLARATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getConflictNames()
  {
    if (conflictNames == null)
    {
      conflictNames = new EDataTypeEList<String>(String.class, this, ABLPackage.CONFLICT_DECLARATION__CONFLICT_NAMES);
    }
    return conflictNames;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ABLPackage.CONFLICT_DECLARATION__CONFLICT_NAMES:
        return getConflictNames();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ABLPackage.CONFLICT_DECLARATION__CONFLICT_NAMES:
        getConflictNames().clear();
        getConflictNames().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ABLPackage.CONFLICT_DECLARATION__CONFLICT_NAMES:
        getConflictNames().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ABLPackage.CONFLICT_DECLARATION__CONFLICT_NAMES:
        return conflictNames != null && !conflictNames.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (conflictNames: ");
    result.append(conflictNames);
    result.append(')');
    return result.toString();
  }

} //ConflictDeclarationImpl
