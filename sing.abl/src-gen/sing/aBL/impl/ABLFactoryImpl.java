/**
 * generated by Xtext 2.28.0
 */
package sing.aBL.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import sing.aBL.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ABLFactoryImpl extends EFactoryImpl implements ABLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ABLFactory init()
  {
    try
    {
      ABLFactory theABLFactory = (ABLFactory)EPackage.Registry.INSTANCE.getEFactory(ABLPackage.eNS_URI);
      if (theABLFactory != null)
      {
        return theABLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ABLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ABLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ABLPackage.MODEL: return createModel();
      case ABLPackage.IMPORT_DECLARATION: return createImportDeclaration();
      case ABLPackage.CONSTANT_DECLARATION: return createConstantDeclaration();
      case ABLPackage.DECISION_CYCLE_SM_CALL_DELCARATION: return createDecisionCycleSMCallDelcaration();
      case ABLPackage.CONFLICT_DECLARATION: return createConflictDeclaration();
      case ABLPackage.ABL_DECLARATION: return createAblDeclaration();
      case ABLPackage.WME_REGISTRATION: return createWMERegistration();
      case ABLPackage.ACTION_REGISTRATION: return createActionRegistration();
      case ABLPackage.WME_DECLARATION: return createWMEDeclaration();
      case ABLPackage.PROPERTY_DECLARATION: return createPropertyDeclaration();
      case ABLPackage.TYPE: return createType();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ImportDeclaration createImportDeclaration()
  {
    ImportDeclarationImpl importDeclaration = new ImportDeclarationImpl();
    return importDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConstantDeclaration createConstantDeclaration()
  {
    ConstantDeclarationImpl constantDeclaration = new ConstantDeclarationImpl();
    return constantDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DecisionCycleSMCallDelcaration createDecisionCycleSMCallDelcaration()
  {
    DecisionCycleSMCallDelcarationImpl decisionCycleSMCallDelcaration = new DecisionCycleSMCallDelcarationImpl();
    return decisionCycleSMCallDelcaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConflictDeclaration createConflictDeclaration()
  {
    ConflictDeclarationImpl conflictDeclaration = new ConflictDeclarationImpl();
    return conflictDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AblDeclaration createAblDeclaration()
  {
    AblDeclarationImpl ablDeclaration = new AblDeclarationImpl();
    return ablDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WMERegistration createWMERegistration()
  {
    WMERegistrationImpl wmeRegistration = new WMERegistrationImpl();
    return wmeRegistration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActionRegistration createActionRegistration()
  {
    ActionRegistrationImpl actionRegistration = new ActionRegistrationImpl();
    return actionRegistration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WMEDeclaration createWMEDeclaration()
  {
    WMEDeclarationImpl wmeDeclaration = new WMEDeclarationImpl();
    return wmeDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyDeclaration createPropertyDeclaration()
  {
    PropertyDeclarationImpl propertyDeclaration = new PropertyDeclarationImpl();
    return propertyDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ABLPackage getABLPackage()
  {
    return (ABLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ABLPackage getPackage()
  {
    return ABLPackage.eINSTANCE;
  }

} //ABLFactoryImpl
