/**
 * generated by Xtext 2.28.0
 */
package sing.aBL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import sing.aBL.ABLPackage;
import sing.aBL.AblDeclaration;
import sing.aBL.ConflictDeclaration;
import sing.aBL.ConstantDeclaration;
import sing.aBL.DecisionCycleSMCallDelcaration;
import sing.aBL.ImportDeclaration;
import sing.aBL.Model;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link sing.aBL.impl.ModelImpl#getName <em>Name</em>}</li>
 *   <li>{@link sing.aBL.impl.ModelImpl#getImports <em>Imports</em>}</li>
 *   <li>{@link sing.aBL.impl.ModelImpl#getConstants <em>Constants</em>}</li>
 *   <li>{@link sing.aBL.impl.ModelImpl#getBehavingEntityName <em>Behaving Entity Name</em>}</li>
 *   <li>{@link sing.aBL.impl.ModelImpl#getTeamNeededForSuccessDefault <em>Team Needed For Success Default</em>}</li>
 *   <li>{@link sing.aBL.impl.ModelImpl#getDecisionCycleSMCall <em>Decision Cycle SM Call</em>}</li>
 *   <li>{@link sing.aBL.impl.ModelImpl#getConflicits <em>Conflicits</em>}</li>
 *   <li>{@link sing.aBL.impl.ModelImpl#getAblDeclarations <em>Abl Declarations</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModelImpl extends MinimalEObjectImpl.Container implements Model
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getImports() <em>Imports</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImports()
   * @generated
   * @ordered
   */
  protected EList<ImportDeclaration> imports;

  /**
   * The cached value of the '{@link #getConstants() <em>Constants</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstants()
   * @generated
   * @ordered
   */
  protected EList<ConstantDeclaration> constants;

  /**
   * The default value of the '{@link #getBehavingEntityName() <em>Behaving Entity Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBehavingEntityName()
   * @generated
   * @ordered
   */
  protected static final String BEHAVING_ENTITY_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBehavingEntityName() <em>Behaving Entity Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBehavingEntityName()
   * @generated
   * @ordered
   */
  protected String behavingEntityName = BEHAVING_ENTITY_NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getTeamNeededForSuccessDefault() <em>Team Needed For Success Default</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTeamNeededForSuccessDefault()
   * @generated
   * @ordered
   */
  protected static final String TEAM_NEEDED_FOR_SUCCESS_DEFAULT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTeamNeededForSuccessDefault() <em>Team Needed For Success Default</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTeamNeededForSuccessDefault()
   * @generated
   * @ordered
   */
  protected String teamNeededForSuccessDefault = TEAM_NEEDED_FOR_SUCCESS_DEFAULT_EDEFAULT;

  /**
   * The cached value of the '{@link #getDecisionCycleSMCall() <em>Decision Cycle SM Call</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDecisionCycleSMCall()
   * @generated
   * @ordered
   */
  protected DecisionCycleSMCallDelcaration decisionCycleSMCall;

  /**
   * The cached value of the '{@link #getConflicits() <em>Conflicits</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConflicits()
   * @generated
   * @ordered
   */
  protected EList<ConflictDeclaration> conflicits;

  /**
   * The cached value of the '{@link #getAblDeclarations() <em>Abl Declarations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAblDeclarations()
   * @generated
   * @ordered
   */
  protected EList<AblDeclaration> ablDeclarations;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ABLPackage.Literals.MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ABLPackage.MODEL__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ImportDeclaration> getImports()
  {
    if (imports == null)
    {
      imports = new EObjectContainmentEList<ImportDeclaration>(ImportDeclaration.class, this, ABLPackage.MODEL__IMPORTS);
    }
    return imports;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ConstantDeclaration> getConstants()
  {
    if (constants == null)
    {
      constants = new EObjectContainmentEList<ConstantDeclaration>(ConstantDeclaration.class, this, ABLPackage.MODEL__CONSTANTS);
    }
    return constants;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getBehavingEntityName()
  {
    return behavingEntityName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBehavingEntityName(String newBehavingEntityName)
  {
    String oldBehavingEntityName = behavingEntityName;
    behavingEntityName = newBehavingEntityName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ABLPackage.MODEL__BEHAVING_ENTITY_NAME, oldBehavingEntityName, behavingEntityName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTeamNeededForSuccessDefault()
  {
    return teamNeededForSuccessDefault;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTeamNeededForSuccessDefault(String newTeamNeededForSuccessDefault)
  {
    String oldTeamNeededForSuccessDefault = teamNeededForSuccessDefault;
    teamNeededForSuccessDefault = newTeamNeededForSuccessDefault;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ABLPackage.MODEL__TEAM_NEEDED_FOR_SUCCESS_DEFAULT, oldTeamNeededForSuccessDefault, teamNeededForSuccessDefault));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DecisionCycleSMCallDelcaration getDecisionCycleSMCall()
  {
    return decisionCycleSMCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDecisionCycleSMCall(DecisionCycleSMCallDelcaration newDecisionCycleSMCall, NotificationChain msgs)
  {
    DecisionCycleSMCallDelcaration oldDecisionCycleSMCall = decisionCycleSMCall;
    decisionCycleSMCall = newDecisionCycleSMCall;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ABLPackage.MODEL__DECISION_CYCLE_SM_CALL, oldDecisionCycleSMCall, newDecisionCycleSMCall);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDecisionCycleSMCall(DecisionCycleSMCallDelcaration newDecisionCycleSMCall)
  {
    if (newDecisionCycleSMCall != decisionCycleSMCall)
    {
      NotificationChain msgs = null;
      if (decisionCycleSMCall != null)
        msgs = ((InternalEObject)decisionCycleSMCall).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ABLPackage.MODEL__DECISION_CYCLE_SM_CALL, null, msgs);
      if (newDecisionCycleSMCall != null)
        msgs = ((InternalEObject)newDecisionCycleSMCall).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ABLPackage.MODEL__DECISION_CYCLE_SM_CALL, null, msgs);
      msgs = basicSetDecisionCycleSMCall(newDecisionCycleSMCall, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ABLPackage.MODEL__DECISION_CYCLE_SM_CALL, newDecisionCycleSMCall, newDecisionCycleSMCall));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ConflictDeclaration> getConflicits()
  {
    if (conflicits == null)
    {
      conflicits = new EObjectContainmentEList<ConflictDeclaration>(ConflictDeclaration.class, this, ABLPackage.MODEL__CONFLICITS);
    }
    return conflicits;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AblDeclaration> getAblDeclarations()
  {
    if (ablDeclarations == null)
    {
      ablDeclarations = new EObjectContainmentEList<AblDeclaration>(AblDeclaration.class, this, ABLPackage.MODEL__ABL_DECLARATIONS);
    }
    return ablDeclarations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ABLPackage.MODEL__IMPORTS:
        return ((InternalEList<?>)getImports()).basicRemove(otherEnd, msgs);
      case ABLPackage.MODEL__CONSTANTS:
        return ((InternalEList<?>)getConstants()).basicRemove(otherEnd, msgs);
      case ABLPackage.MODEL__DECISION_CYCLE_SM_CALL:
        return basicSetDecisionCycleSMCall(null, msgs);
      case ABLPackage.MODEL__CONFLICITS:
        return ((InternalEList<?>)getConflicits()).basicRemove(otherEnd, msgs);
      case ABLPackage.MODEL__ABL_DECLARATIONS:
        return ((InternalEList<?>)getAblDeclarations()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ABLPackage.MODEL__NAME:
        return getName();
      case ABLPackage.MODEL__IMPORTS:
        return getImports();
      case ABLPackage.MODEL__CONSTANTS:
        return getConstants();
      case ABLPackage.MODEL__BEHAVING_ENTITY_NAME:
        return getBehavingEntityName();
      case ABLPackage.MODEL__TEAM_NEEDED_FOR_SUCCESS_DEFAULT:
        return getTeamNeededForSuccessDefault();
      case ABLPackage.MODEL__DECISION_CYCLE_SM_CALL:
        return getDecisionCycleSMCall();
      case ABLPackage.MODEL__CONFLICITS:
        return getConflicits();
      case ABLPackage.MODEL__ABL_DECLARATIONS:
        return getAblDeclarations();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ABLPackage.MODEL__NAME:
        setName((String)newValue);
        return;
      case ABLPackage.MODEL__IMPORTS:
        getImports().clear();
        getImports().addAll((Collection<? extends ImportDeclaration>)newValue);
        return;
      case ABLPackage.MODEL__CONSTANTS:
        getConstants().clear();
        getConstants().addAll((Collection<? extends ConstantDeclaration>)newValue);
        return;
      case ABLPackage.MODEL__BEHAVING_ENTITY_NAME:
        setBehavingEntityName((String)newValue);
        return;
      case ABLPackage.MODEL__TEAM_NEEDED_FOR_SUCCESS_DEFAULT:
        setTeamNeededForSuccessDefault((String)newValue);
        return;
      case ABLPackage.MODEL__DECISION_CYCLE_SM_CALL:
        setDecisionCycleSMCall((DecisionCycleSMCallDelcaration)newValue);
        return;
      case ABLPackage.MODEL__CONFLICITS:
        getConflicits().clear();
        getConflicits().addAll((Collection<? extends ConflictDeclaration>)newValue);
        return;
      case ABLPackage.MODEL__ABL_DECLARATIONS:
        getAblDeclarations().clear();
        getAblDeclarations().addAll((Collection<? extends AblDeclaration>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ABLPackage.MODEL__NAME:
        setName(NAME_EDEFAULT);
        return;
      case ABLPackage.MODEL__IMPORTS:
        getImports().clear();
        return;
      case ABLPackage.MODEL__CONSTANTS:
        getConstants().clear();
        return;
      case ABLPackage.MODEL__BEHAVING_ENTITY_NAME:
        setBehavingEntityName(BEHAVING_ENTITY_NAME_EDEFAULT);
        return;
      case ABLPackage.MODEL__TEAM_NEEDED_FOR_SUCCESS_DEFAULT:
        setTeamNeededForSuccessDefault(TEAM_NEEDED_FOR_SUCCESS_DEFAULT_EDEFAULT);
        return;
      case ABLPackage.MODEL__DECISION_CYCLE_SM_CALL:
        setDecisionCycleSMCall((DecisionCycleSMCallDelcaration)null);
        return;
      case ABLPackage.MODEL__CONFLICITS:
        getConflicits().clear();
        return;
      case ABLPackage.MODEL__ABL_DECLARATIONS:
        getAblDeclarations().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ABLPackage.MODEL__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case ABLPackage.MODEL__IMPORTS:
        return imports != null && !imports.isEmpty();
      case ABLPackage.MODEL__CONSTANTS:
        return constants != null && !constants.isEmpty();
      case ABLPackage.MODEL__BEHAVING_ENTITY_NAME:
        return BEHAVING_ENTITY_NAME_EDEFAULT == null ? behavingEntityName != null : !BEHAVING_ENTITY_NAME_EDEFAULT.equals(behavingEntityName);
      case ABLPackage.MODEL__TEAM_NEEDED_FOR_SUCCESS_DEFAULT:
        return TEAM_NEEDED_FOR_SUCCESS_DEFAULT_EDEFAULT == null ? teamNeededForSuccessDefault != null : !TEAM_NEEDED_FOR_SUCCESS_DEFAULT_EDEFAULT.equals(teamNeededForSuccessDefault);
      case ABLPackage.MODEL__DECISION_CYCLE_SM_CALL:
        return decisionCycleSMCall != null;
      case ABLPackage.MODEL__CONFLICITS:
        return conflicits != null && !conflicits.isEmpty();
      case ABLPackage.MODEL__ABL_DECLARATIONS:
        return ablDeclarations != null && !ablDeclarations.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", behavingEntityName: ");
    result.append(behavingEntityName);
    result.append(", teamNeededForSuccessDefault: ");
    result.append(teamNeededForSuccessDefault);
    result.append(')');
    return result.toString();
  }

} //ModelImpl
